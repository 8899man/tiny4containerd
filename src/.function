#!/bin/bash
# functions

_apt_get_install() {
    # clear work path
    rm -fr /var/lib/apt/lists/*;
    {
        curl -L --connect-timeout 1 http://www.google.com >/dev/null 2>&1 && {
            printf %s "$DEBIAN_SOURCE";
            :
        } || printf %s "$DEBIAN_CN_SOURCE"
    } | tee /etc/apt/sources.list;
    apt-get update && apt-get -y install $APT_GET_LIST_MAKE;

    return $?
}

_make_obm() {
    echo "------------ untar kernel ------------------------";
    _hash $TMP/linux-kernel.tar.xz;
    # fix: Directory renamed before its status could be extracted
    bsdtar -C $TMP -xJf $TMP/linux-kernel.tar.xz || return $((LINENO / 2));
    mv -v $TMP/linux-$kernel_version $KERNEL_PATH;
    rm -f $TMP/linux-kernel.tar.xz;

    echo "----------- bzImage modules ----------------------";
    # make ARCH=x86_64 menuconfig # ncurses-dev
    cp -v $THIS_DIR/kernel.cfg $KERNEL_PATH/.config;

    # put in queue
    local cores=$(nproc);
    cd $KERNEL_PATH && \
        make -j $cores bzImage && \
        make -j $cores modules || \
    return $(_err_line $((LINENO / 2)))
}

_make_kernel() {
    _wait_file || return 1;

    echo "------------ kernel build ------------------------";
    # The post kernel build process
    # Install the kernel modules in $ROOTFS
    cd $KERNEL_PATH && \
        make INSTALL_MOD_PATH=$ROOTFS modules_install firmware_install || \
        return $(_err_line $((LINENO / 2)));

    # remove empty link
    rm -fv $ROOTFS/lib/modules/${kernel_version}-tc/build \
        $ROOTFS/lib/modules/${kernel_version}-tc/source;

    echo "--------- bzImage -> vmlinuz64 -------------------";
    _hash $KERNEL_PATH/arch/x86/boot/bzImage;
    # Prepare the ISO directory with the kernel
    # $KERNEL_PATH/arch/x86_64/boot/bzImage -> ../../x86/boot/bzImage
    mv -v $KERNEL_PATH/arch/x86/boot/bzImage $TMP/iso/boot/vmlinuz64;
    rm -fr $KERNEL_PATH # clear
}

_make_libcap2(){
    echo "------------- make libcap2 -----------------------";
    _wait_file $TMP/libcap2.tar.gz.lock || return $(_err_line $((LINENO / 2)));
    _hash $TMP/libcap2.tar.gz;

    tar -C $TMP -xzvf $TMP/libcap2.tar.gz || return $(_err_line $((LINENO / 2)));
    cd $TMP/libcap-$LIBCAP2_VERSION;
        mkdir -p output;
        sed -i 's/LIBATTR := yes/LIBATTR := no/' Make.Rules;
        make && make prefix=`pwd`/output install || return $(_err_line $((LINENO / 2)));
        mkdir -p $ROOTFS/usr/local/lib;
        cp -av `pwd`/output/lib64/* $ROOTFS/usr/local/lib;
        rm -fr $TMP/libcap* # clear
}

_undep() {
    _wait_file || return 1;
    echo "------------ install dep -------------------------";
    _wait_file $TMP/tcz.lock || return $(_err_line $((LINENO / 2)));
    local dep;
    for dep in $TMP/tcz/*.tcz;
    do
        printf "\nundep '${dep##*/}', ";
        unsquashfs -f -d $ROOTFS $dep || return $(_err_line $((LINENO / 2)))
    done
    rm -fr $TMP/tcz* # clear
}

_apply_rootfs(){
    _wait_file || return 1;
    echo "------------ apply rootfs ------------------------";
    _wait_file $TMP/tc_rootfs.gz.lock || return $(_err_line $((LINENO / 2)));

    _hash $TMP/tc_rootfs.gz;
    # Install Tiny Core Linux rootfs
    cd $ROOTFS && \
        zcat $TMP/tc_rootfs.gz | \
        cpio -f -i -H newc -d --no-absolute-filenames || \
        return $(_err_line $((LINENO / 2)));

    rm -f $TMP/tc_rootfs.gz*; # clear

    echo "----------- ca-certificates ----------------------";
    # Extract ca-certificates, TCL changed something such that these need to be extracted post-install
    chroot $ROOTFS sh -xc ' \
        ldconfig \
        && /usr/local/tce.installed/openssl \
        && /usr/local/tce.installed/ca-certificates \
    ' || return $(_err_line $((LINENO / 2)));

    ln -sT lib $ROOTFS/lib64;
    ln -sT ../usr/local/etc/ssl $ROOTFS/etc/ssl
}

_modify_config() {
    echo "------------ modify config -----------------------";
    # acpi http://wiki.tinycorelinux.net/wiki:using_acpid_to_control_your_pc_buttons
    mkdir -p $ROOTFS/usr/local/etc/acpi/events/;
    printf %s 'event=button/power*
action=/sbin/poweroff
' | tee $ROOTFS/usr/local/etc/acpi/events/all;

    # sysctl
    printf %s 'net.ipv4.ip_forward=1
# net.ipv6.conf.all.forwarding=1
' | tee $ROOTFS/etc/sysctl.conf;

    # clean motd
    > $ROOTFS/etc/motd;

    # reset PS1
    sed -i 's/\\w/\\W/g;s/\/apps/\/opt/' $ROOTFS/etc/profile $ROOTFS/etc/skel/.profile;
    printf %s "
sudo /usr/local/sbin/wtmp
export TERM=xterm TMOUT=300
readonly TMOUT
" | tee -a $ROOTFS/etc/profile;

    # insert shutdown command
    sed -i ':a;N;$!ba;s/# Sync.*-9 $K5_SKIP/STAMP=`date +%Y%m%d`\
LOG_DIR=\/log\/tiny\/${STAMP:0:6}\
mkdir -p $LOG_DIR\
\n{\n\
    printf "\\n\\n[`date`]\\n"\n\
    # stop container daemon\
    \/usr\/local\/sbin\/containerd stop\n\
    # shutdown script\
    find \/opt\/tiny\/etc\/init.d -type f -perm \/u+x -name "K*.sh" -exec \/bin\/sh -c {} \\\;\n\
    \/usr\/local\/sbin\/wtmp\n\
    # PID USER COMMAND\
    ps -ef | grep "crond\\|monitor\\|ntpd\\|sshd\\|udevd" | awk "{print \\"kill \\"\\$1}" | sh 2>\/dev\/null\
\n} 2>\&1 \| tee -a $LOG_DIR\/shut_$STAMP.log\n\
unset LOG_DIR STAMP\n\
# Sync all filesystems.\
sync; sleep 1; sync; sleep 1\n\
# Unload disk\
\/usr\/local\/sbin\/mdisk destroy\
/;s/apps/opt/g' $ROOTFS/etc/init.d/rc.shutdown;

    # unset CMDLINE
    printf "\nunset CMDLINE\n" | tee -a $ROOTFS/etc/init.d/tc-functions >> $ROOTFS/usr/bin/filetool.sh;

    # hide std, fix stderr
    sed -i 's/2>\&1 >\/dev\/null/>\/dev\/null 2>\&1/g;s/chpasswd -m/& 2\>\/dev\/null/g;s/home\*\|noautologin\*\|opt\*\|user\*/# &/' \
        $ROOTFS/etc/init.d/tc-config;

    # ln: /usr/local/etc/ssl/cacert.pem: File exists
    # ln: /usr/local/etc/ssl/ca-bundle.crt: File exists
    # $ROOTFS/usr/local/tce.installed/ca-certificates

    # password
    sed -i "s/^tc.*//;/# Cmnd alias specification/i\
Cmnd_Alias WRITE_CMDS = /usr/bin/tee /etc/sysconfig/backup, /usr/local/sbin/wtmp\n\
\n" $ROOTFS/etc/sudoers;

    # drop passwd: /usr/bin/passwd -> /bin/busybox.suid
    rm -f $ROOTFS/usr/bin/passwd;

    # fix "su -"
    echo root > $ROOTFS/etc/sysconfig/superuser;

    # add some timezone files so we're explicit about being UTC
    echo 'UTC' | tee $ROOTFS/etc/timezone;
    cp -vL /usr/share/zoneinfo/UTC $ROOTFS/etc/localtime;

    # setup acpi config dir
    # tcl6's sshd is compiled without `/usr/local/sbin` in the path, need `ip`, link it elsewhere
    # Make some handy symlinks (so these things are easier to find), visudo, Subversion link, after /opt/bin in $PATH
    ln -svT /usr/local/etc/acpi     $ROOTFS/etc/acpi;
    ln -svT /usr/local/sbin/ip      $ROOTFS/usr/sbin/ip;
    ln -fs /bin/vi              $ROOTFS/usr/bin/;
    ln -fs /opt/bin/svn         $ROOTFS/usr/bin/;
    ln -fs /opt/bin/svnadmin    $ROOTFS/usr/bin/;
    ln -fs /opt/bin/svnlook     $ROOTFS/usr/bin/;

    # crond
    rm -fr $ROOTFS/var/spool/cron/crontabs;
    ln -fs /opt/tiny/etc/crontabs/  $ROOTFS/var/spool/cron/;

    # move dhcp.sh out of init.d as we're triggering it manually so its ready a bit faster
    cp -v $ROOTFS/etc/init.d/dhcp.sh $ROOTFS/usr/local/etc/init.d;
    echo : | tee $ROOTFS/etc/init.d/dhcp.sh;

    # Make sure init scripts are executable
    find $ROOTFS/usr/local/sbin \
        -type f -exec chmod -c +x '{}' +
}

# It builds an image that can be used as an ISO *and* a disk image.
# but read only...
_build_iso() {
    [ -n "$OUTPUT_PATH" ]|| {
        printf "\n[WARN] skip create iso.\n";
        return 0
    };

    cd $ROOTFS || return $((LINENO / 2));

    # create initrd.img
    find | cpio -o -H newc | \
        xz -9 --format=lzma --verbose --verbose --threads=0 --extreme > \
        $TMP/iso/boot/initrd.img || return $((LINENO / 2));

    _hash $TMP/iso/boot/initrd.img;

    # Note: only "-isohybrid-mbr /..." is specific to xorriso.
    xorriso \
        -publisher "Docker Inc." \
        -as mkisofs -l -J -R -V $LABEL \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        -b boot/isolinux/isolinux.bin \
        -c boot/isolinux/boot.cat \
        -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
        -o "$OUTPUT_PATH" \
        $TMP/iso || return $((LINENO / 2));

    _hash "$OUTPUT_PATH";

    return 0
}
